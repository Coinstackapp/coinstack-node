'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function fetchResult(url, options) {
  return (0, _nodeFetch2.default)(url, options).then(function (r) {
    return r.json();
  }).then(function (j) {
    return j.result;
  }).catch(function (err) {
    throw new TypeError('This endpoint does not exist');
  });
}

var Cryptowatch = function () {
  function Cryptowatch() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Cryptowatch);

    this.url = 'https://api.cryptowat.ch';
    this.options = Object.assign({
      // the cryptowatch api times out
      // when incorrect params supplied
      // todo: ask them why
      timeout: 5000
    }, options);
  }

  // https://cryptowat.ch/docs/api#rate-limit


  _createClass(Cryptowatch, [{
    key: 'allowance',
    value: function allowance() {
      return (0, _nodeFetch2.default)(this.url).then(function (r) {
        return r.json();
      }).then(function (j) {
        return j.allowance;
      });
    }

    // https://cryptowat.ch/docs/api#price

  }, {
    key: 'price',
    value: function price(coin) {
      var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'usd';
      var market = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'coinbase';

      return fetchResult(this.url + '/markets/' + market + '/' + coin + currency + '/price', this.options);
    }

    // https://cryptowat.ch/docs/api#summary

  }, {
    key: 'summary',
    value: function summary(coin) {
      var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'usd';
      var market = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'coinbase';

      return fetchResult(this.url + '/markets/' + market + '/' + coin + currency + '/summary', this.options);
    }

    // https://cryptowat.ch/docs/api#trades

  }, {
    key: 'trades',
    value: function trades(coin) {
      var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'usd';
      var market = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'coinbase';

      return fetchResult(this.url + '/markets/' + market + '/' + coin + currency + '/trades', this.options);
    }

    // https://cryptowat.ch/docs/api#orderbook

  }, {
    key: 'orderbook',
    value: function orderbook(coin) {
      var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'usd';
      var market = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'coinbase';

      return fetchResult(this.url + '/markets/' + market + '/' + coin + currency + '/orderbook', this.options);
    }

    // https://cryptowat.ch/docs/api#ohlc

  }, {
    key: 'ohlc',
    value: function ohlc(coin) {
      var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'usd';
      var market = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'coinbase';

      return fetchResult(this.url + '/markets/' + market + '/' + coin + currency + '/ohlc', this.options);
    }

    // https://cryptowat.ch/docs/api#prices

  }, {
    key: 'prices',
    value: function prices() {
      return fetchResult(this.url + '/markets/prices', this.options);
    }

    // https://cryptowat.ch/docs/api#summaries

  }, {
    key: 'summaries',
    value: function summaries() {
      return fetchResult(this.url + '/markets/summaries', this.options);
    }
  }]);

  return Cryptowatch;
}();

module.exports = Cryptowatch;